This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
index.stories.ts
modal.css
Modal.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="index.stories.ts">
import type { Meta, StoryObj } from '@storybook/html';
import { createTemplate } from "./Modal";
⋮----
type Story = StoryObj;
</file>

<file path="modal.css">
.modal {
⋮----
.overlay {
⋮----
.dialog {
⋮----
.header {
⋮----
.close-button {
⋮----
.body {
⋮----
.footer {
⋮----
.primary-action {
⋮----
.secondary-action {
⋮----
.hidden {
⋮----
.modal:nth-of-type(2) {
</file>

<file path="Modal.ts">
export type ModalStackItem = {
  modal: HTMLElement;
  trigger: HTMLElement;
};
⋮----
function openModal(modalId: string, triggerEl: HTMLElement)
⋮----
function closeModal(modalId: string)
⋮----
function updateAriaForModals()
⋮----
function trapFocus(modal: HTMLElement)
⋮----
const handler = (e: KeyboardEvent) =>
⋮----
// 一旦解除してから再登録
⋮----
// 拡張プロパティを HTMLElement に追加
⋮----
interface HTMLElement {
    _trapHandler?: (e: KeyboardEvent) => void;
  }
⋮----
// イベントバインド
⋮----
export const createTemplate = () =>
⋮----
return /* html */ `
</file>

</files>
